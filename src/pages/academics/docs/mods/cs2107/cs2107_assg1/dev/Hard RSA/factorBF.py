from Crypto.Util.number import long_to_bytes
from itertools import combinations
from sys import exit

c = 668429799473721530511962639216923430858391297872841152692743420544702905777064651398589566095349543172944531819846924514342146869263549421438829643600671732996262668090632301256184019462140072902564592543027241940424227397178345631872951232430465449024398912298799158331652315046580086304553690485021661040913326
d = 174578185735285633562508728440567285078520067909815099058726915817707556669632378374999049597856517755476882149289156989320515760313727355841934798526770263872145649331402684917237370206421285424003824504973781270272861040723684248450947778245010001531137570045089267288789602989839747747347451992784131828287526577
totient_n = 425059648494758500827957593186813469635953846662167111751375929039086827709540334419226240424071129923122503452017813337634158390001885415158185566409664627684690322852923348122784319620248608048182882437956187655008823198198465452715004069652755525145676075641602530382487060636219769963885647035371462184882402544

list_of_factors = [2, 2, 2, 2, 336700853343689, 2168618486876659, 2372920016563403, 2403046799405089, 2586814523352023,
                   3622576076504453, 4243869938141279, 4563116379369167, 5554076710006157, 5754080039950003,
                   6215349115364177, 6280486020663289, 7113969462989429, 7363116243840713, 7982189543923849,
                   8909447726951003, 9101401300427207, 9251874130484561, 9392042922946403, 9566645979971233]

even_factors = list_of_factors[:4]
even_length = len(even_factors)
odd_factors = list_of_factors[4:]
print("=" * 50)

ctr = 0

for i in range(5, len(odd_factors) // 2 + 1):
    print("i = {}".format(i))
    for left_bag in combinations(odd_factors, i):
        left_bag = left_bag
        right_bag = odd_factors[:]
        for element in left_bag:
            right_bag.remove(element)
        p = 1
        q = 1
        for element in left_bag:
            p *= element
        for element in right_bag:
            q *= element
        for x in range(1, even_length):
            new_p = p * 2 ** x
            new_q = q * 2 ** (even_length - x)
            new_p += 1
            new_q += 1
            assert totient_n == (new_p - 1) * (new_q - 1)
            n = new_p * new_q
            m = pow(c, d, n)
            output = long_to_bytes(m)
            try:
                if b"door" in output:
                    print("Found flag: {}".format(output))
                    print("=" * 50)
                    exit(0)
                ctr += 1
            except Exception as e:
                ctr += 1
                pass
            if ctr % 10000 == 0:
                print("{:.2f} processed".format(ctr / 10000))